package template 

import (
	fr "github.com/fbuedding/iota-admin/internal/pkg/fiwareRepository"
	"time"
	"math"
	"strconv"
	"strings"
)

templ Services(rs fr.FiwareServiceRows) {
	if len(rs) != 0 {
		for _, s := range rs {
			@Service(s)
		}
	} else {
		<div>No Fiware Services</div>
	}
}

templ Service(s fr.FiwareServiceRow) {
	<div id={"i"+s.Id} class="card bg-base-100 shadow-xl indicator">
		<div class="badge badge-outline indicator-item indicator-top indicator-center">{ TimeElapsed(time.Now(), s.UpdatedAt, false) }</div>
		<div class="card-body">
			<h2 class="card-title">{ s.Name }</h2>
			<p>Service was created on {s.CreatedAt.Format("02.01.2006")}</p>
			<div class="card-actions justify-end">
				<button class="btn btn-outline btn-sm" hx-delete={ "/fiwareService/" + s.Id } hx-target={"#i"+ s.Id} hx-swap="outerHTML">delete</button>
			</div>
		</div>
	</div>
}

func RoundTime(input float64) int {
	var result float64

	if input < 0 {
		result = math.Ceil(input - 0.5)
	} else {
		result = math.Floor(input + 0.5)
	}

	// only interested in integer, ignore fractional
	i, _ := math.Modf(result)

	return int(i)
}

func s(x float64) string {
	if int(x) == 1 {
		return ""
	}
	return "s"
}

func TimeElapsed(now time.Time, then time.Time, full bool) string {
	var parts []string
	var text string

	year2, month2, day2 := now.Date()
	hour2, minute2, second2 := now.Clock()

	year1, month1, day1 := then.Date()
	hour1, minute1, second1 := then.Clock()

	year := math.Abs(float64(int(year2 - year1)))
	month := math.Abs(float64(int(month2 - month1)))
	day := math.Abs(float64(int(day2 - day1)))
	hour := math.Abs(float64(int(hour2 - hour1)))
	minute := math.Abs(float64(int(minute2 - minute1)))
	second := math.Abs(float64(int(second2 - second1)))

	week := math.Floor(day / 7)

	if year > 0 {
		parts = append(parts, strconv.Itoa(int(year))+" year"+s(year))
	}

	if month > 0 {
		parts = append(parts, strconv.Itoa(int(month))+" month"+s(month))
	}

	if week > 0 {
		parts = append(parts, strconv.Itoa(int(week))+" week"+s(week))
	}

	if day > 0 {
		parts = append(parts, strconv.Itoa(int(day))+" day"+s(day))
	}

	if hour > 0 {
		parts = append(parts, strconv.Itoa(int(hour))+" hour"+s(hour))
	}

	if minute > 0 {
		parts = append(parts, strconv.Itoa(int(minute))+" minute"+s(minute))
	}

	if second > 0 {
		parts = append(parts, strconv.Itoa(int(second))+" second"+s(second))
	}

	if now.After(then) {
		text = " ago"
	} else {
		text = " after"
	}

	if len(parts) == 0 {
		return "just now"
	}

	if full {
		return strings.Join(parts, ", ") + text
	}
	return parts[0] + text
}
