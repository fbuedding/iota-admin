package template;

const TEMPLATE_ID = "add-service-group-form-template"
const FORM_ID = "add-service-group-form"

templ AddServiceGroupForm(services string) {
	<add-service-group-form
 		if services !="" {
			services={ services }
		}
	></add-service-group-form>
}

templ AddServiceGroupFormTemplate() {
	<template id="add-service-group-form-template">
		<form hx-post="/serviceGroups">
			<label class="form-control">
				<div class="label">
					<span class="label-text">Service</span>
				</div>
				<select
 					name="service"
 					class="select select-bordered w-full"
 					required
 					hx-get="serviceGroups/servicePaths"
 					hx-target="#service-paths"
 					hx-swap="innerHTML"
 					id="select-services"
				>
					<option disabled selected value="">Select service</option>
				</select>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Service-Path</span>
				</div>
				<input name="subservice" type="text" placeholder="Type here" class="input input-bordered" list="service-paths" autocomplete="off" required/>
				<datalist id="service-paths"></datalist>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Resource</span>
				</div>
				<input name="resource" type="text" placeholder="Type here" class="input input-bordered" list="resources" autocomplete="off" required/>
				<datalist id="resources">
					<option>{ "/iot/d" } </option>
				</datalist>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">API Key</span>
				</div>
				<div class="join">
					<input id="apikey-input" name="apikey" type="text" placeholder="Type here" class="input input-bordered join-item w-full" autocomplete="off" required/>
					<input
 						type="button"
 						class="btn join-item"
 						value="Generate"
 						onclick={ uuidv4("apikey-input") }
					/>
				</div>
			</label>
			<div class="form-control pt-5">
				<label class="label cursor-pointer">
					<span class="label-text">Timestamp</span>
					<input name="timestamp" type="checkbox" checked="checked" class="checkbox"/>
				</label>
			</div>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Entity type</span>
				</div>
				<input name="entity_type" type="text" placeholder="Type here" class="input input-bordered" autocomplete="off" required/>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Trust token</span>
				</div>
				<input name="trust" type="text" placeholder="Type here" class="input input-bordered" autocomplete="off"/>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Context Broker host</span>
				</div>
				<input name="cbHost" type="text" placeholder="Type here" class="input input-bordered" autocomplete="off"/>
			</label>
			<div class="pl-5 pt-5">
				<div>Attributes:</div>
				<div id="attributes" class=""></div>
				<div class="pt-5">
					<input id="attributes-add-btn" type="button" value="Add" class="btn" />
					<input id="attributes-rm-btn" type="button" value="Remove" class="btn" disabled />
				</div>
			</div>
      // TODO pack Attributes, Metadata and so on into selfcontained web component
			<div class="pl-5 pt-5">
				<div>Lazy Attributes:</div>
				<div id="lazy-attributes" class=""></div>
				<div class="pt-5">
					<input id="attributes-add-btn" type="button" value="Add" class="btn" />
					<input id="attributes-rm-btn" type="button" value="Remove" class="btn" disabled />
				</div>
			</div>
			<p class="pt-5">
				<input type="submit" value="Submit" class="btn"/>
			</p>
		</form>
	</template>
	@AddServiceGroupFormScript(TEMPLATE_ID, FORM_ID)
}

script uuidv4(id string) {
  let el = document.getElementById(id);
  const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
    .replace(/[xy]/g, function (c) {
      const r = Math.random() * 16 | 0, 
        v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  el.value = uuid;
}

script AddServiceGroupFormScript(templateId string, formId string) {

  class AddServiceGroupForm extends HTMLElement {
    static formAssociated = true;
    constructor() {
      super();
      this.internals_ = this.attachInternals();
      this.state = {
        attributes : {
          count: 0,
          countMetadata : []
        }
      }

    }
    connectedCallback() {
      let template = document.getElementById(templateId);
      this.appendChild(template.content.cloneNode(true));
      this.id = formId;
      this.parseServices();

      this.addBtn = document.getElementById("attributes-add-btn");
      this.addBtn.onclick = () => { this.addAttribute() };
      this.removeBtn = document.getElementById("attributes-rm-btn");
      this.removeBtn.onclick = () => { this.removeGenericAttribute("attributes") };
    }

    disconnectedCallback() {
    }

    adoptedCallback() {
    }

    attributeChangedCallback(name, oldValue, newValue) {
    }
    
    parseServices() {
     if(this.hasAttribute("services")){
       try {
        const services = JSON.parse(this.getAttribute("services"));
        const select = document.getElementById("select-services");
        for (const service of services) {
          const option = document.createElement("option");
          option.value = service.Service;
          option.innerHTML = service.Service;
          select.appendChild(option);
        }
       } catch(e){
        alert("Error parsing Fiware Services")
       }
     }
    }


    addAttribute() {
      const countAttributes = this.state.attributes.count;

      let container = document.getElementById("attributes");
      let el = document.createElement('attribute-input');
      el.setAttribute("index", this.state.attributes.count);

      container.appendChild(el);
      el.scrollIntoView({behavior: "smooth", block:"center"});
      
      document.getElementById("attributes-rm-btn").disabled = false;
      this.state.attributes.count++;

    }

    removeGenericAttribute(id) {

      let element = document.getElementById(`${id}`);
      element.removeChild(element.lastChild)
      this.state[id].count--;
      if(this.state[id].count <= 0) {
        document.getElementById(`${id}-rm-btn`).disabled = true;
      }
    }

  }
  customElements.define("add-service-group-form", AddServiceGroupForm);
}
