package attributes

import "github.com/fbuedding/fiware-iot-agent-sdk"
import "fmt"
import "github.com/fbuedding/iota-admin/web/templates/components"

templ StaticAttributes(sas []iotagentsdk.StaticAttribute) {
	for i, sa := range(sas) {
		<div class="overflow-x-auto">
			<table class="table">
				<!-- head -->
				<thead>
					<tr>
						<th>{ fmt.Sprint( i + 1 ) } </th>
					</tr>
				</thead>
				<tbody>
					<!-- row 1 -->
					<tr>
						<td>Name</td>
						<td>{ sa.Name }</td>
					</tr>
					<tr>
						<td>Type</td>
						<td>{ sa.Type }</td>
					</tr>
					<tr>
						<td>Object ID</td>
						<td>{ sa.ObjectID }</td>
					</tr>
					<tr>
						<td>Metadata</td>
						<td>
							@components.WrapMapIfNotEmpty(Metdata, sa.Metadata)
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	}
}

templ StaticAttributesInput() {
	<static-attributes-input></static-attributes-input>
}

templ StaticAttributeTemplate() {
	<template id="static-attributes-container-template">
		<div class="pl-5 pt-5">
			<div>Static Attributes:</div>
			<div id="static-attributes" class=""></div>
			<div class="pt-5">
				<input id="add-btn" type="button" value="Add" class="btn"/>
				<input id="rm-btn" type="button" value="Remove" class="btn" disabled/>
			</div>
		</div>
	</template>
	<template id="static-attribute-template">
		<div class="collapse collapse-arrow mt-5 border border-base-300">
			<input type="checkbox" checked/>
			<div id="static-attribute-title" class="collapse-title text-xl font-medium">
				%index
			</div>
			<div class="collapse-content">
				<label class="form-control">
					<div class="label">
						<span class="label-text">Object ID</span>
					</div>
					<input name="static_attributes[%index].object_id" type="text" placeholder="Type here" class="input input-bordered"/>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Name</span>
					</div>
					<input name="static_attributes[%index].name" type="text" placeholder="Type here" class="input input-bordered" required/>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Type</span>
					</div>
					<input name="static_attributes[%index].type" type="text" placeholder="Type here" class="input input-bordered" required/>
				</label>
				@MetdataInput("static_attributes")
			</div>
		</div>
	</template>
	@StaticAttributesScript()
}

script StaticAttributesScript() {
  // Create a class for the element
  class StaticAttribute extends HTMLElement {
    static formAssociated = true;

    constructor() {
      // Always call super first in constructor
      super();
      this.internals_ = this.attachInternals();
      this.state = {
        count: 0,
      };
    }

    connectedCallback() {
      this.attributeTemplate = document.getElementById("static-attribute-template");
      let template = document.getElementById("static-attributes-container-template");
      this.appendChild(template.content.cloneNode(true));
      this.attributesContainer = this.querySelector("#static-attributes");

      this.addBtn = this.querySelector("#add-btn");
      this.addBtn.onclick = () => { this.addAttribute() };
      this.removeBtn = this.querySelector("#rm-btn");
      this.removeBtn.onclick = () => { this.removeGenericAttribute() };
    }

    disconnectedCallback() {}

    adoptedCallback() {}

    attributeChangedCallback(name, oldValue, newValue) {}
    addAttribute() {
      const el = this.attributeTemplate.content.cloneNode(true).firstElementChild;
      el.innerHTML = el.innerHTML.replaceAll("%index", this.state.count);
      this.attributesContainer.appendChild(el);
      el.scrollIntoView({behavior: "smooth", block:"center"});
      
      this.state.count++;
      this.removeBtn.disabled = (this.state.count < 1);
    }

    removeGenericAttribute() {
      this.attributesContainer.removeChild(this.attributesContainer.lastChild)
      this.state.count--;
      this.removeBtn.disabled = (this.state.count < 1);
    }
  }

  customElements.define("static-attributes-input", StaticAttribute);
}
