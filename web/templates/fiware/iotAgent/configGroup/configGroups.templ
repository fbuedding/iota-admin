package configgroup

import (
	i "github.com/fbuedding/iota-admin/pkg/iot-agent-sdk"
	"fmt"
	"github.com/fbuedding/iota-admin/web/templates/fiware/iotAgent/attributes"
	"github.com/fbuedding/iota-admin/web/templates/components"
)

templ ConfigGroup(sg i.ConfigGroup) {
	<div class="container flex-col gap-5">
		<div class="overflow-x-auto border rounded border-base-300">
			<table class="table">
				<tbody>
					<tr>
						<td>Api-Key</td>
						<td>{ string(sg.Apikey) }</td>
					</tr>
					<tr>
						<td>Service Path</td>
						<td>{ sg.ServicePath }</td>
					</tr>
					<tr>
						<td>Resource</td>
						<td>{ string(sg.Resource) } </td>
					</tr>
					<tr>
						<td>Timestamp</td>
						<td>
							if sg.Timestamp != nil {
								{ fmt.Sprintf("%t", *sg.Timestamp) }
							} else {
								false  
							}
						</td>
					</tr>
					<tr>
						<td>Entity Type</td>
						<td>{ sg.EntityType } </td>
					</tr>
					<tr>
						<td>Trust Token</td>
						<td>{ sg.Trust } </td>
					</tr>
					<tr>
						<td>Context Broker</td>
						<td>{ sg.CbHost } </td>
					</tr>
					<tr>
						<td>Attributes</td>
						<td>
							@components.WrapArrIfNotEmpty(attributes.Attributes, sg.Attributes)
						</td>
					</tr>
					<tr>
						<td>Lazy Attributes</td>
						<td>
							@components.WrapArrIfNotEmpty(attributes.LazyAttributes, sg.Lazy)
						</td>
					</tr>
					<tr>
						<td>Commands</td>
						<td>
							@components.WrapArrIfNotEmpty(attributes.Commands, sg.Commands)
						</td>
					</tr>
					<tr>
						<td>Static Attributes</td>
						<td>
							@components.WrapArrIfNotEmpty(attributes.StaticAttributes, sg.StaticAttributes)
						</td>
					</tr>
					<tr>
						<td>Internal Attributes</td>
						<td>
							@components.WrapArrIfNotEmpty(attributes.InternalAttributes, sg.InternalAttributes)
						</td>
					</tr>
					<tr>
						<td>Explicit Attributes</td>
						<td>{ sg.ExplicitAttrs } </td>
					</tr>
					<tr>
						<td>Entitiy Name Expression</td>
						<td>{ sg.EntityNameExp } </td>
					</tr>
					<tr>
						<td>NGSI Version</td>
						<td>{ sg.NgsiVersion } </td>
					</tr>
					<tr>
						<td>Default entity name conjunction</td>
						<td>{ sg.DefaultEntityNameConjunction } </td>
					</tr>
					<tr>
						<td>Autoprovision</td>
						<td>{ fmt.Sprint(sg.Autoprovision) } </td>
					</tr>
					<tr>
						<td>Payload type</td>
						<td>{ sg.PayloadType } </td>
					</tr>
					<tr>
						<td>Transport</td>
						<td>{ sg.Transport } </td>
					</tr>
					<tr>
						<td>Endpoint</td>
						<td>{ sg.Endpoint } </td>
					</tr>
					<tr>
						<td>
							<button
 								type="button"
 								class="btn"
 								hx-target="closest .container"
 								hx-swap="outerHTML"
 								hx-delete={ fmt.Sprintf("/configGroups?apiKey=%v&resource=%v&service=%v&servicePath=%v", sg.Apikey, sg.Resource, sg.Service, sg.ServicePath) }
 								hx-confirm={ fmt.Sprintf("Do you want to delete the Config Group: \nApi Key: %v \nResource: %v\n In service: \nService: %v\nservicePath: %v", sg.Apikey, sg.Resource, sg.Service, sg.ServicePath) }
							>Delete</button>
						</td>
						<td></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
}

templ FiwareServiceConfigGroups(service string, sgs [] i.ConfigGroup, checked bool) {
	<div class="collapse collapse-arrow border border-base-300">
		<input type="checkbox"/>
		<div id="static-attribute-title" class="collapse-title text-xl font-medium underline">
			{ service }
		</div>
		<div class="collapse-content flex flex-col gap-5">
			for _, v := range sgs {
				@ConfigGroup(v)
			}
		</div>
	</div>
}

templ FiwareServices(fssgs map[string][]i.ConfigGroup, openedService string) {
	<div>
		<a href="/addConfigGroup" hx-target="#views" hx-swap="innerHTML" class="btn">Add a Config Group</a>
	</div>
	<div class="flex flex-col gap-5">
		<h3 class="text-xl py-5">Fiware services</h3>
		for k, v := range fssgs {
			@FiwareServiceConfigGroups(k,v,k==openedService)
		}
	</div>
	<div>
		<a href="/addConfigGroup" hx-target="#views" hx-swap="innerHTML" class="btn">Add a Config Group</a>
	</div>
}
