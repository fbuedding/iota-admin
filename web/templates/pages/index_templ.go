// Code generated by templ - DO NOT EDIT.

// templ: version: 0.2.476
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	fr "github.com/fbuedding/iota-admin/internal/pkg/fiwareRepository"
	a "github.com/fbuedding/iota-admin/web/templates/fiware/iotAgent/agent"
)

func Index(agents fr.IotaRows) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = a.IoTAs(agents).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<form hx-post=\"/iotAgents\" hx-target=\"#iot-agents\" hx-swap=\"outerHTML\" hx-on::after-request=\" if(event.detail.successful) this.reset()\" class=\"join\"><input name=\"host\" type=\"text\" required placeholder=\"Host\" class=\"input input-bordered join-item\"> <input name=\"port\" type=\"number\" required placeholder=\"Port\" class=\"input input-bordered join-item\"> <input name=\"alias\" type=\"text\" placeholder=\"Alias\" class=\"input input-bordered join-item\"> <input type=\"submit\" class=\"btn btn-outline join-item\"></form><div class=\"divider\"></div><div><input class=\"input input-bordered join-item\" type=\"search\" name=\"name\" placeholder=\"Search Fiware Services...\" hx-get=\"/fiwareService\" hx-trigger=\"input changed delay:250ms, name\" hx-target=\"#fiware-services\"></div><div id=\"fiware-services\" class=\"grid grid-cols-3 gap-4\" hx-trigger=\"load\" hx-get=\"/fiwareService\" hx-target-error=\"#alerts\"></div><div class=\"flex flex-row gap-5\"><form hx-post=\"/fiwareService\" hx-target=\"#fiware-services\" hx-swap=\"innerHTML\" hx-on::after-request=\" if(event.detail.successful) this.reset()\" class=\"join\"><input type=\"text\" name=\"name\" placeholder=\"Fiware Service\" required class=\"input input-bordered join-item\"> <button type=\"submit\" class=\"btn btn-outline join-item\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := `Add`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button></form></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func getUser(ctx context.Context) string {
	if user, ok := ctx.Value("user").(string); ok {
		return user
	}
	return "Invalid User"
}
